Notes ,Assessment  ,Evidence 
Video , 1 ,https://www.youtube.com/watch?v=7ZUhyTCfLUM   
Workload is spread over the whole team (One team member is often X-times more productive than the others...) , 3 ,https://github.com/lokesh45/StockPrediction/graphs/contributors 
"But nevertheless, here is a track record that everyone is contributing a lot) ", 3 ,https://github.com/lokesh45/StockPrediction/graphs/contributors   
Number of commits , 3 ,47 by 3 team members 
Number of commits: by different people , 3 ,"17,16,14 by 3 team members "
Issues reports: there are many , 3 ,31 issues closed https://github.com/lokesh45/StockPrediction/issues?q=is%3Aissue+is%3Aclosed   
Issues are being closed , 3 ,https://github.com/lokesh45/StockPrediction/issues?q=is%3Aissue+is%3Aclosed  
DOI badge exists , 3 ,https://zenodo.org/record/4127313  
"Docs: doco generated, format not ugly ", 3 ,Documentation generated in doc folder https://github.com/lokesh45/StockPrediction/tree/master/doc  
Docs: what: point descriptions of each class/function (in isolation) , 1 ,"No proper documentation of the project, only images shown https://github.com/lokesh45/StockPrediction/tree/master/doc  "
"Docs: how: for common use cases X, Y, Z mini tutorials showing worked examples on how to do X, Y, Z ", 3 ,https://github.com/lokesh45/StockPrediction/blob/master/README.md   
"Docs: why: docs tell a story, motivate the whole thing, deliver a punchline that makes you want to rush out and use the thing ", 3 ,https://github.com/lokesh45/StockPrediction/blob/master/README.md  
"Docs: short video, animated, hosted on your repo. That convinces people why they want to work on your code. ", 3 ,https://www.youtube.com/watch?v=7ZUhyTCfLUM&feature=youtu.be  
Use of version control tools , 3 ,Project hosted on GH 
Use of style checkers , 3 ,Used flake8 and pylint https://github.com/lokesh45/StockPrediction/blob/master/.flake8 https://github.com/lokesh45/StockPrediction/blob/master/.travis.yml  
Use of code formatters. , 3 ,Used black and prettier https://github.com/lokesh45/StockPrediction/blob/master/.pre-commit-config.yaml  
Use of syntax checkers. , 3 ,Used flake8 and pylint https://github.com/lokesh45/StockPrediction/blob/master/.flake8 https://github.com/lokesh45/StockPrediction/blob/master/.travis.yml 
Use of code coverage , 0 ,No code coverage 
Other automated analysis tools , 0 ,None other than pylint and flake8 
Test cases exist , 2 ,https://github.com/lokesh45/StockPrediction/tree/master/tests  
Test cases are routinely executed , 0 ,No workflows or continuous integration platforms https://app.travis-ci.com/lokesh45/StockPrediction  
The files CONTRIBUTING.md lists coding standards and lots of tips on how to extend the system without screwing things up , 1 ,https://github.com/lokesh45/StockPrediction/blob/master/CONTRIBUTING.md  
Issues are discussed before they are closed , 1 ,Very less discussions on issues https://github.com/lokesh45/StockPrediction/issues?q=is%3Aissue+is%3Aclosed  
Chat channel: exists , 0 ,No chat channel found 
Test cases: a large proportion of the issues related to handling failing cases. , 1 ,Few issues are related to failing test cases https://github.com/lokesh45/StockPrediction/issues?q=is%3Aissue+is%3Aclosed 
Evidence that the whole team is using the same tools: everyone can get to all tools and files , 3 ,Everyone used the same tools and all team members have access to the repository.  https://github.com/lokesh45/StockPrediction/graphs/contributors  
"Evidence that the whole team is using the same tools (e.g. config files in the repo, updated by lots of different people) ", 3 ,Commit history of config files in the repository   
"Evidence that the whole team is using the same tools (e.g. tutor can ask anyone to share screen, they demonstrate the system running on their computer) ", 3 ,
Evidence that the members of the team are working across multiple places in the code base , 3 ,https://github.com/lokesh45/StockPrediction/graphs/contributors 
Short release cycles , 1 ,https://github.com/lokesh45/StockPrediction/releases   
,,
Q1 - What your software does ,,
"1.1) Does your website and documentation provide a clear, high-level overview of your software? ",YES,
1.2) Does your website and documentation clearly describe the type of user who should use your software? ,NO,
1.3) Do you publish case studies to show how your software has been used by yourself and others? ,YES,
Q2 - Your project's and software's identity ,,
2.1) Is the name of your project/software unique? , YES ,
2.2) Is your project/software name free from trademark violations? , YES ,
Q3 - Availability of your software ,,
3.1) Is your software available as a package that can be deployed without building it? , NO ,
3.2) Is your software available for free? , YES ,
"3.3) Is your source code publicly available to download, either as a downloadable bundle or via access to a source code repository? ", YES ,
"3.4) Is your software hosted in an established, third-party repository ? ", YES ,
Q4 - Your software's documentation ,,
 4.1) Is your documentation clearly available on your website or within your software? , YES ,
" 4.2) Does your documentation include a ""quick start"" guide, that provides a short overview of how to use your software with some basic examples of use? ", NO ,
" 4.3) If you provide more extensive documentation, does this provide clear, step-by-step instructions on how to deploy and use your software? ", YES ,
"4.4) Do you provide a comprehensive guide to all your software’s commands, functions and options? ", NO ,
4.5) Do you provide troubleshooting information that describes the symptoms and step-by-step solutions for problems and error messages? , NO ,
"4.6) If your software can be used as a library, package or service by other software, do you provide comprehensive API documentation? ", NO ,
4.7) Do you store your documentation under revision control with your source code? , YES ,
"4.8) Do you publish your release history on your web site or in your documentation? ", NO ,
Q5 - How you support your software ,,
5.1) Does your software describe how a user can get help with using your software? , YES ,
"5.2) Does your website and documentation describe what support, if any, you provide to users and developers? ", YES ,
5.3) Does your project have an e-mail address or forum that is solely for supporting users? , NO ,
5.4) Are e-mails to your support e-mail address received by more than one person? , NOT APPLICABLE ,
5.5) Does your project have a ticketing system to manage bug reports and feature requests? , YES ,
"5.6) Is your project's ticketing system publicly visible to your users, so they can view bug reports and feature requests? ",YES,
Q6 - Your software's maintainability ,,
6.1) Is your software’s architecture and design modular? , YES ,
6.2) Does your software use an accepted coding standard or convention? , YES ,
Q7 - Open standards and your software ,,
" 7.1) Does your software allow data to be imported and exported using open data formats?  ", YES ,
"7.2) Does your software allow communications using open communications protocols?  ", YES ,
Q8 - Your software's portability ,,
"8.1) Is your software cross-platform compatible? ", YES ,
Q9 - Your software and accessibility ,,
9.1) Does your software adhere to appropriate accessibility conventions or standards? , NO ,
9.2) Does your documentation adhere to appropriate accessibility conventions or standards? , NO ,
Q10 - How you manage your source code ,,
10.1) Is your source code stored in a repository under revision control? , YES ,
10.2) Is each source code release a snapshot of the repository? , YES ,
10.3) Are releases tagged in the repository? , YES ,
"10.4) Is there a branch of the repository that is always stable? (i.e., tests always pass, code always builds successfully) ", YES ,
10.5) Do you back-up your repository? , YES ,
Q11 - Building and installing your software ,,
11.1) Do you provide publicly available instructions for building your software from the source code? , YES ,
"11.2) Can you build, or package, your software using an automated tool? ", YES ,
11.3) Do you provide publicly available instructions for deploying your software? , YES ,
11.4) Does your documentation list all third-party dependencies? , YES ,
11.5) Does your documentation list the version number for all third-party dependencies? , YES ,
"11.6) Does your software list the web address, and licences for all third-party dependencies and say whether the dependencies are mandatory or ",NO ,
11.7) Can you download dependencies using a dependency management tool or package manager?, YES,
11.8) Do you have tests that can be run after your software has been built or deployed to show whether the build or deployment has been successful? , YES ,
Q12 - How you test your software ,,
12.1) Do you have an automated test suite for your software? , NO ,
12.2) Do you have a framework to periodically (e.g. nightly) run your tests on the latest version of the source code? , NOT APPLICABLE ,
"12.3) Do you use continuous integration, automatically running tests whenever changes are made to your source code? ", NO ,
12.4) Are your test results publicly visible? , NO ,
12.5) Are all manually run tests documented? , NO ,
Q13 - How you engage with your community ,,
13.1) Does your project have resources that are regularly updated with information about your software? , YES ,
13.2)  Does your website state how many projects and users are associated with your project? , NO ,
13.3) Do you provide success stories on your website? , NO ,
13.4) Do you list your important partners and collaborators on your website? , NO ,
13.5) Do you list your project's publications on your website or link to a resource where these are available? , NO ,
13.6) Do you list third-party publications that refer to your software on your website or link to a resource where these are available? , NO ,
13.7) Can users subscribe to notifications to changes to your source code repository? ,YES,
"13.8) If your software is developed as an open source project ,do you have a governance model? ", YES ,
Q14 - How you manage contributions ,,
"14.1) Do you accept contributions from people who are not part of your project? ", YES ,
14.2) Do you have a contributions policy? , YES ,
14.3) Is your contributions' policy publicly available? , YES ,
14.4) Do contributors keep the copyright/IP of their contributions? , NO ,
Q15 - Your software's copyright and licensing ,,
15.1) Does your website and documentation clearly state the copyright owners of your software and documentation? , YES ,
15.2) Does each of your source code files include a copyright statement? , NO ,
15.3) Does your website and documentation clearly state the licence of your software? , YES ,
15.4) Is your software released under an open source licence? , YES ,
15.5) Is your software released under an OSI-approved open-source licence? , YES ,
15.6) Does each of your source code files include a licence header? , NO ,
15.7) Do you have a recommended citation for your software? , NO ,
Q16 - Your plans for the future ,,
16.1) Does your website or documentation include a project roadmap ? , NO ,
"16.2) Does your website or documentation describe how your project is funded, and the period over which funding is guaranteed? ", NO ,
"16.3) Do you make timely announcements of the deprecation of components, APIs, etc.? ", NO ,
